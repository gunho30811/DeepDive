ECMAScript는 자바스크립트 표준 사양인 ECMA-262를 말하며, 프로그래밍 언어의 값, 타입, 객체와 프로퍼티, 함수,
표준 빌트인 객체등 핵심 문법 규정. 브라우저에는 내장되는 자바스크립트 엔진이 구현되어 있다.
자바스크립트는 -> ECMAScript + 브라우저가 지원하는 클라이언트 사이드 Web API(DOM,BOM,Canvas,XMLHttpRequest,
fetch, requestAnimationFrame, SVG, Web Storage, Web Component, Web Worker) 이다.

컴파일러 언어: 코드가 실행되기 전 단계인 컴파일 타임에 소스코드 전체를 한 번에 머신코드로 변환 후 실행.
-실행 파일을 가지고 있어, 컴파일과 실행 단계가 분리 되어 코드 실행 속도가 빠르다.
인터프리터 언어: 코드가 실행되는 단계인 런타임에 문 단위로 한 줄씩 중간인 바이트코드로 변환 후 실행.
-코드가 실행 될 적 마다, 인터프리터 과정이 반복 수행 되므로 실행속도가 비교적 느리다. 

모든 브라우저는 자바스크립트 엔진을 내장하고 있다. 뿐 아니라, Node.js도 가지고 있다. 다만, 브라우저에서 
실행하는 자바스크립트와 Node.js에서 실행하는 자바스크립트의 쓰임이 다르다.
브라우저는 -> 렌더링
Node.js -> 브라우저 외부에서 자바스크립트 실행 환경을 제공하는 것이 주된 목적이다.
따라서 브라우저와 Node.js는 자바스크립트의 코어인 ECMAScirpt 는 실행 할 수 있으나, 브라우저와 Node.js에 각 각
추가되는 기능은 호환되지 않는다.
예시로, 브라우저는 파싱된 HTML 요소를 선택 조작 하는 DOM API를 제공한다. 하지만 Node.js는 DOM API가 없다.
반대로 Node.js에서는 파일을 생성하고 수정할 수 있는 파일 시스템을 제공 한다. 하지만 브라우저는 지원하지 않는다.
(다만, Web API인 FileReader 객체 를 사용해 파일을 읽는 것은 가능하다.)

npm은 자바스크립트 패키지 매니저이다. Node.js에서 사용할 수 있는 모듈들을 패키지화해서 모아둔 저장소 역할과
패키지 설치 및 관리를 위한 CLI를 제공한다. (모듈화)

변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름.

변수 선언에는 var, let, const 키워드 사용.
var 단점 -> 블록 레벨 스코프를 지원하지 않고, 함수 레벨 스코프를 지원 한다 는 것. 이로 인해 의도치 않게 전역 변수가
선언되어 심각한 부작용이 발생하기도 함.